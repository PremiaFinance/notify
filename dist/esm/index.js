import bigInt from 'big-integer';
import uuid from 'uuid/v4';
import blocknativeSdk from 'bn-sdk';
import { _, dictionary, locale, getClientLocale } from 'svelte-i18n';
import { writable, get } from 'svelte/store';
import { SvelteComponent, init as init$1, safe_not_equal, element, append, svg_element, text, attr, insert, detach, space, noop, set_style, toggle_class, listen, run_all, component_subscribe, group_outros, update_keyed_each, fix_and_outro_and_destroy_block, check_outros, transition_in, transition_out, empty, mount_component, set_data, fix_position, add_transform, create_animation, add_render_callback, create_in_transition, create_out_transition, destroy_component } from 'svelte/internal';
import { onDestroy } from 'svelte';
import { fly } from 'svelte/transition';
import { quintIn } from 'svelte/easing';
import { flip } from 'svelte/animate';
import debounce from 'lodash.debounce';
import ow from 'ow';

const notifyMessages = {
  en: {
    transaction: {
      txRequest: "Your transaction is waiting for you to confirm",
      nsfFail: "You have insufficient funds to complete this transaction",
      txUnderpriced: "The gas price for your transaction is too low, try again with a higher gas price",
      txRepeat: "This could be a repeat transaction",
      txAwaitingApproval: "You have a previous transaction waiting for you to confirm",
      txConfirmReminder: "Please confirm your transaction to continue, the transaction window may be behind your browser",
      txSendFail: "You rejected the transaction",
      txSent: "Your transaction has been sent to the network",
      txStallPending: "Your transaction has stalled and has not entered the transaction pool",
      txPool: "Your transaction has started",
      txStallConfirmed: "Your transaction has stalled and hasn't been confirmed",
      txSpeedUp: "Your transaction has been sped up",
      txCancel: "Your transaction is being canceled",
      txFailed: "Your transaction has failed",
      txConfirmed: "Your transaction has succeeded",
      txUnderpriced: "The gas limit is set too low to complete this transaction",
      txError: "Oops something went wrong, please try again"
    },
    watched: {
      txPool: "Your account is {verb} {formattedValue} ether {preposition} {counterpartyShortened}",
      txSpeedUp: "Your account is {verb} {formattedValue} ether {preposition} {counterpartyShortened}",
      txCancel: "Your account is {verb} {formattedValue} ether {preposition} {counterpartyShortened}",
      txConfirmed: "Your account successfully {verb} {formattedValue} ether {preposition} {counterpartyShortened}"
    }
  },
  es: {
    transaction: {
      txRequest: "Su transacción está esperando que confirme",
      nsfFail: "No tiene fondos suficientes para completar esta transacción.",
      txUnderpriced: "El precio del gas para su transacción es demasiado bajo, intente nuevamente con un precio del gas más alto",
      txRepeat: "Esto podría ser una transacción repetida",
      txAwaitingApproval: "Tienes una transacción anterior esperando que confirmes",
      txConfirmReminder: "Confirme su transacción para continuar, la ventana de transacción puede estar detrás de su navegador",
      txSendFail: "Rechazaste la transacción",
      txSent: "Su transacción ha sido enviada a la red.",
      txStallPending: "Su transacción se ha estancado y no ha ingresado al grupo de transacciones",
      txPool: "Su transacción ha comenzado",
      txStallConfirmed: "Su transacción se ha estancado y no ha sido confirmada.",
      txSpeedUp: "Su transacción ha sido acelerada",
      txCancel: "Tu transacción está siendo cancelada",
      txFailed: "Su transacción ha fallado",
      txConfirmed: "Su transacción ha tenido éxito.",
      txUnderpriced: "El límite de gas está establecido demasiado bajo para completar esta transacción",
      txError: "Vaya, algo salió mal, por favor intente nuevamente"
    },
    watched: {
      txPool: "su cuenta está {verb, select, receiving {recibiendo} sending {enviando}} {formattedValue} ether {preposition, select, from {desde} to {a}} {counterpartyShortened}",
      txSpeedUp: "su cuenta está {verb, select, receiving {recibiendo} sending {enviando}} {formattedValue} ether {preposition, select, from {desde} to {a}} {counterpartyShortened}",
      txCancel: "su cuenta está {verb, select, receiving {recibiendo} sending {enviando}} {formattedValue} ether {preposition, select, from {desde} to {a}} {counterpartyShortened}",
      txConfirmed: "su cuenta {verb, select, received {recibió} sent {ha enviado}} con éxito {formattedValue} ether {preposition, select, from {de} to {a}} {counterpartyShortened}"
    }
  }
};

/* src/components/TypeIcon.svelte generated by Svelte v3.12.1 */

function add_css() {
	var style = element("style");
	style.id = 'svelte-16i17ha-style';
	style.textContent = "div.svelte-16i17ha{height:100%;width:1.5rem}";
	append(document.head, style);
}

// (14:2) {#if type === 'hint'}
function create_if_block_3(ctx) {
	var svg, style, t, g_2, g, circle, g_1, path, circle_1;

	return {
		c() {
			svg = svg_element("svg");
			style = svg_element("style");
			t = text("@-webkit-keyframes kf_el_51c2MS41pY_an_cXFUsKhg3V {\n          50% {\n            stroke-dasharray: 553;\n          }\n          0% {\n            stroke-dasharray: 553;\n          }\n          100% {\n            stroke-dasharray: 553;\n          }\n        }\n        @keyframes kf_el_51c2MS41pY_an_cXFUsKhg3V {\n          50% {\n            stroke-dasharray: 553;\n          }\n          0% {\n            stroke-dasharray: 553;\n          }\n          100% {\n            stroke-dasharray: 553;\n          }\n        }\n        @-webkit-keyframes kf_el_51c2MS41pY_an_M-ML-YLcm {\n          50% {\n            stroke-dashoffset: 553;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 553;\n          }\n        }\n        @keyframes kf_el_51c2MS41pY_an_M-ML-YLcm {\n          50% {\n            stroke-dashoffset: 553;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 553;\n          }\n        }\n        @-webkit-keyframes kf_el_j5HR_U6Nrp_an_KGzPpGvQb {\n          50% {\n            opacity: 0;\n          }\n          56.67% {\n            opacity: 1;\n          }\n          0% {\n            opacity: 0;\n          }\n          100% {\n            opacity: 1;\n          }\n        }\n        @keyframes kf_el_j5HR_U6Nrp_an_KGzPpGvQb {\n          50% {\n            opacity: 0;\n          }\n          56.67% {\n            opacity: 1;\n          }\n          0% {\n            opacity: 0;\n          }\n          100% {\n            opacity: 1;\n          }\n        }\n        @-webkit-keyframes kf_el_j5HR_U6Nrp_an_al_MjoEv-F {\n          50% {\n            stroke-dasharray: 39.41;\n          }\n          0% {\n            stroke-dasharray: 39.41;\n          }\n          100% {\n            stroke-dasharray: 39.41;\n          }\n        }\n        @keyframes kf_el_j5HR_U6Nrp_an_al_MjoEv-F {\n          50% {\n            stroke-dasharray: 39.41;\n          }\n          0% {\n            stroke-dasharray: 39.41;\n          }\n          100% {\n            stroke-dasharray: 39.41;\n          }\n        }\n        @-webkit-keyframes kf_el_j5HR_U6Nrp_an_VsVMmQ1MU {\n          50% {\n            stroke-dashoffset: 39.41;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 39.41;\n          }\n        }\n        @keyframes kf_el_j5HR_U6Nrp_an_VsVMmQ1MU {\n          50% {\n            stroke-dashoffset: 39.41;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 39.41;\n          }\n        }\n        @-webkit-keyframes kf_el_TZApOLwXZU_an_dL6-SZLSH {\n          50% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          83.33% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          100% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(1, 1) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(1, 1)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          0% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n        }\n        @keyframes kf_el_TZApOLwXZU_an_dL6-SZLSH {\n          50% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          83.33% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          100% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(1, 1) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(1, 1)\n              translate(-88.50000762939453px, -56.5px);\n          }\n          0% {\n            -webkit-transform: translate(88.50000762939453px, 56.5px)\n              scale(0, 0) translate(-88.50000762939453px, -56.5px);\n            transform: translate(88.50000762939453px, 56.5px) scale(0, 0)\n              translate(-88.50000762939453px, -56.5px);\n          }\n        }\n        #el_DHAskxC2T * {\n          -webkit-animation-duration: 1s;\n          animation-duration: 1s;\n          -webkit-animation-iteration-count: 1;\n          animation-iteration-count: 1;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el__hILOKhuR3 {\n          fill: none;\n          -webkit-transform: translate(7px, 7px);\n          transform: translate(7px, 7px);\n        }\n        #el_TZApOLwXZU {\n          fill: #979797;\n          -webkit-transform: matrix(1, 0, 0, -1, 0, 113);\n          transform: matrix(1, 0, 0, -1, 0, 113);\n        }\n        #el_fIxIrV8WbF {\n          stroke: #979797;\n          stroke-width: 14;\n        }\n        #el_TZApOLwXZU_an_dL6-SZLSH {\n          -webkit-animation-fill-mode: forwards;\n          animation-fill-mode: forwards;\n          -webkit-animation-name: kf_el_TZApOLwXZU_an_dL6-SZLSH;\n          animation-name: kf_el_TZApOLwXZU_an_dL6-SZLSH;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el_j5HR_U6Nrp {\n          -webkit-animation-fill-mode: forwards, forwards, forwards;\n          animation-fill-mode: forwards, forwards, forwards;\n          -webkit-animation-name: kf_el_j5HR_U6Nrp_an_VsVMmQ1MU,\n            kf_el_j5HR_U6Nrp_an_al_MjoEv-F, kf_el_j5HR_U6Nrp_an_KGzPpGvQb;\n          animation-name: kf_el_j5HR_U6Nrp_an_VsVMmQ1MU,\n            kf_el_j5HR_U6Nrp_an_al_MjoEv-F, kf_el_j5HR_U6Nrp_an_KGzPpGvQb;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n        }\n        #el_51c2MS41pY {\n          -webkit-animation-fill-mode: forwards, forwards;\n          animation-fill-mode: forwards, forwards;\n          -webkit-animation-name: kf_el_51c2MS41pY_an_M-ML-YLcm,\n            kf_el_51c2MS41pY_an_cXFUsKhg3V;\n          animation-name: kf_el_51c2MS41pY_an_M-ML-YLcm,\n            kf_el_51c2MS41pY_an_cXFUsKhg3V;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n        }\n      ");
			g_2 = svg_element("g");
			g = svg_element("g");
			circle = svg_element("circle");
			g_1 = svg_element("g");
			path = svg_element("path");
			circle_1 = svg_element("circle");
			attr(circle, "cx", "88.5");
			attr(circle, "cy", "56.5");
			attr(circle, "r", "7.5");
			attr(circle, "id", "el_TZApOLwXZU");
			attr(g, "id", "el_TZApOLwXZU_an_dL6-SZLSH");
			attr(g, "data-animator-group", "true");
			attr(g, "data-animator-type", "2");
			attr(path, "d", "m88.5 128v-39.4130859");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "id", "el_j5HR_U6Nrp");
			attr(circle_1, "cx", "88");
			attr(circle_1, "cy", "88");
			attr(circle_1, "r", "88");
			attr(circle_1, "id", "el_51c2MS41pY");
			attr(g_1, "id", "el_fIxIrV8WbF");
			attr(g_2, "fill-rule", "evenodd");
			attr(g_2, "id", "el__hILOKhuR3");
			attr(svg, "viewBox", "0 0 190 190");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "id", "el_DHAskxC2T");
		},

		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, style);
			append(style, t);
			append(svg, g_2);
			append(g_2, g);
			append(g, circle);
			append(g_2, g_1);
			append(g_1, path);
			append(g_1, circle_1);
		},

		d(detaching) {
			if (detaching) {
				detach(svg);
			}
		}
	};
}

// (262:2) {#if type === 'pending'}
function create_if_block_2(ctx) {
	var svg, style, t, g_3, circle, g_2, g, path, g_1, path_1;

	return {
		c() {
			svg = svg_element("svg");
			style = svg_element("style");
			t = text("@-webkit-keyframes kf_el_fv0z90vBrL_an_PwUBZ96LS {\n          0% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n          }\n          100% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n          }\n        }\n        @keyframes kf_el_fv0z90vBrL_an_PwUBZ96LS {\n          0% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n          }\n          100% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n          }\n        }\n        @-webkit-keyframes kf_el_u3QHGLTow3_an_EQ8OetHGq {\n          0% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n          }\n          50% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n          }\n          100% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(720deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(720deg)\n              translate(-88px, -87.587890625px);\n          }\n        }\n        @keyframes kf_el_u3QHGLTow3_an_EQ8OetHGq {\n          0% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(0deg)\n              translate(-88px, -87.587890625px);\n          }\n          50% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(360deg)\n              translate(-88px, -87.587890625px);\n          }\n          100% {\n            -webkit-transform: translate(88px, 87.587890625px) rotate(720deg)\n              translate(-88px, -87.587890625px);\n            transform: translate(88px, 87.587890625px) rotate(720deg)\n              translate(-88px, -87.587890625px);\n          }\n        }\n        #el_XWLVvD_rP * {\n          -webkit-animation-duration: 2s;\n          animation-duration: 2s;\n          -webkit-animation-iteration-count: infinite;\n          animation-iteration-count: infinite;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el_Uh6HOhkAVi {\n          fill: none;\n          stroke-width: 14;\n          -webkit-transform: translate(7px, 7px);\n          transform: translate(7px, 7px);\n        }\n        #el_PHAWgO26lN {\n          stroke: #ffbd00;\n        }\n        #el_A4XF5QQwhp {\n          stroke: #ffbf00;\n        }\n        #el_u3QHGLTow3_an_EQ8OetHGq {\n          -webkit-animation-fill-mode: backwards;\n          animation-fill-mode: backwards;\n          -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n            translate(-88px, -87.587890625px);\n          transform: translate(88px, 87.587890625px) rotate(0deg)\n            translate(-88px, -87.587890625px);\n          -webkit-animation-name: kf_el_u3QHGLTow3_an_EQ8OetHGq;\n          animation-name: kf_el_u3QHGLTow3_an_EQ8OetHGq;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el_fv0z90vBrL_an_PwUBZ96LS {\n          -webkit-animation-fill-mode: backwards;\n          animation-fill-mode: backwards;\n          -webkit-transform: translate(88px, 87.587890625px) rotate(0deg)\n            translate(-88px, -87.587890625px);\n          transform: translate(88px, 87.587890625px) rotate(0deg)\n            translate(-88px, -87.587890625px);\n          -webkit-animation-name: kf_el_fv0z90vBrL_an_PwUBZ96LS;\n          animation-name: kf_el_fv0z90vBrL_an_PwUBZ96LS;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n      ");
			g_3 = svg_element("g");
			circle = svg_element("circle");
			g_2 = svg_element("g");
			g = svg_element("g");
			path = svg_element("path");
			g_1 = svg_element("g");
			path_1 = svg_element("path");
			attr(circle, "cx", "88");
			attr(circle, "cy", "88");
			attr(circle, "r", "88");
			attr(circle, "id", "el_PHAWgO26lN");
			attr(path, "d", "m88 25v62.5878906");
			attr(path, "id", "el_fv0z90vBrL");
			attr(g, "id", "el_fv0z90vBrL_an_PwUBZ96LS");
			attr(g, "data-animator-group", "true");
			attr(g, "data-animator-type", "1");
			attr(path_1, "d", "m88 45.9160156v41.671875");
			attr(path_1, "id", "el_u3QHGLTow3");
			attr(g_1, "id", "el_u3QHGLTow3_an_EQ8OetHGq");
			attr(g_1, "data-animator-group", "true");
			attr(g_1, "data-animator-type", "1");
			attr(g_2, "stroke-linecap", "round");
			attr(g_2, "stroke-linejoin", "round");
			attr(g_2, "id", "el_A4XF5QQwhp");
			attr(g_3, "fill-rule", "evenodd");
			attr(g_3, "id", "el_Uh6HOhkAVi");
			attr(svg, "viewBox", "0 0 190 190");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "id", "el_XWLVvD_rP");
		},

		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, style);
			append(style, t);
			append(svg, g_3);
			append(g_3, circle);
			append(g_3, g_2);
			append(g_2, g);
			append(g, path);
			append(g_2, g_1);
			append(g_1, path_1);
		},

		d(detaching) {
			if (detaching) {
				detach(svg);
			}
		}
	};
}

// (401:2) {#if type === 'success'}
function create_if_block_1(ctx) {
	var svg, style, t, path;

	return {
		c() {
			svg = svg_element("svg");
			style = svg_element("style");
			t = text("@-webkit-keyframes kf_el_RzYtw9rUyN_an_gX4OsFPwzz {\n          0% {\n            stroke-dasharray: 473.87;\n          }\n          100% {\n            stroke-dasharray: 473.87;\n          }\n        }\n        @keyframes kf_el_RzYtw9rUyN_an_gX4OsFPwzz {\n          0% {\n            stroke-dasharray: 473.87;\n          }\n          100% {\n            stroke-dasharray: 473.87;\n          }\n        }\n        @-webkit-keyframes kf_el_RzYtw9rUyN_an_WfcYZ9pjL {\n          0% {\n            stroke-dashoffset: 473.87;\n          }\n          50% {\n            stroke-dashoffset: 473.87;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n        }\n        @keyframes kf_el_RzYtw9rUyN_an_WfcYZ9pjL {\n          0% {\n            stroke-dashoffset: 473.87;\n          }\n          50% {\n            stroke-dashoffset: 473.87;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n        }\n        #el_3OA8Szq_A * {\n          -webkit-animation-duration: 1s;\n          animation-duration: 1s;\n          -webkit-animation-iteration-count: 1;\n          animation-iteration-count: 1;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el_RzYtw9rUyN {\n          fill: none;\n          stroke: #7ed321;\n          stroke-width: 17;\n          -webkit-animation-fill-mode: forwards, forwards;\n          animation-fill-mode: forwards, forwards;\n          -webkit-animation-name: kf_el_RzYtw9rUyN_an_WfcYZ9pjL,\n            kf_el_RzYtw9rUyN_an_gX4OsFPwzz;\n          animation-name: kf_el_RzYtw9rUyN_an_WfcYZ9pjL,\n            kf_el_RzYtw9rUyN_an_gX4OsFPwzz;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n        }\n      ");
			path = svg_element("path");
			attr(path, "d", "m176.126953 63.8789062-94.4130858 95.4130858-72.87402345-72.8740232\n        27.93945315-27.9394532 44.9345703 44.9345704 94.4130858-94.413086");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "id", "el_RzYtw9rUyN");
			attr(svg, "viewBox", "0 0 185 168");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "id", "el_3OA8Szq_A");
		},

		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, style);
			append(style, t);
			append(svg, path);
		},

		d(detaching) {
			if (detaching) {
				detach(svg);
			}
		}
	};
}

// (478:2) {#if type === 'error'}
function create_if_block(ctx) {
	var svg, style, t, g_1, path, g, circle, path_1;

	return {
		c() {
			svg = svg_element("svg");
			style = svg_element("style");
			t = text("@-webkit-keyframes kf_el_IAuv9ut-2-_an_xlDuvYsRc {\n          50% {\n            opacity: 0;\n          }\n          66.67% {\n            opacity: 1;\n          }\n          0% {\n            opacity: 0;\n          }\n          100% {\n            opacity: 1;\n          }\n        }\n        @keyframes kf_el_IAuv9ut-2-_an_xlDuvYsRc {\n          50% {\n            opacity: 0;\n          }\n          66.67% {\n            opacity: 1;\n          }\n          0% {\n            opacity: 0;\n          }\n          100% {\n            opacity: 1;\n          }\n        }\n        @-webkit-keyframes kf_el_IAuv9ut-2-_an_29XE36SGo1 {\n          50% {\n            stroke-dasharray: 39.41;\n          }\n          0% {\n            stroke-dasharray: 39.41;\n          }\n          100% {\n            stroke-dasharray: 39.41;\n          }\n        }\n        @keyframes kf_el_IAuv9ut-2-_an_29XE36SGo1 {\n          50% {\n            stroke-dasharray: 39.41;\n          }\n          0% {\n            stroke-dasharray: 39.41;\n          }\n          100% {\n            stroke-dasharray: 39.41;\n          }\n        }\n        @-webkit-keyframes kf_el_IAuv9ut-2-_an_xo_EIWruT {\n          50% {\n            stroke-dashoffset: 39.41;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 39.41;\n          }\n        }\n        @keyframes kf_el_IAuv9ut-2-_an_xo_EIWruT {\n          50% {\n            stroke-dashoffset: 39.41;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 39.41;\n          }\n        }\n        @-webkit-keyframes kf_el_q_eIK0z3HI_an_045tZJOHl {\n          50% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          83.33% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          100% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(1, 1) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(1, 1)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          0% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n        }\n        @keyframes kf_el_q_eIK0z3HI_an_045tZJOHl {\n          50% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          83.33% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          100% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(1, 1) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(1, 1)\n              translate(-88.50000762939453px, -144.5px);\n          }\n          0% {\n            -webkit-transform: translate(88.50000762939453px, 144.5px)\n              scale(0, 0) translate(-88.50000762939453px, -144.5px);\n            transform: translate(88.50000762939453px, 144.5px) scale(0, 0)\n              translate(-88.50000762939453px, -144.5px);\n          }\n        }\n        @-webkit-keyframes kf_el_5BNAI_PBsn_an_aToWhdlG8F {\n          50% {\n            stroke-dasharray: 527.67;\n          }\n          0% {\n            stroke-dasharray: 527.67;\n          }\n          100% {\n            stroke-dasharray: 527.67;\n          }\n        }\n        @keyframes kf_el_5BNAI_PBsn_an_aToWhdlG8F {\n          50% {\n            stroke-dasharray: 527.67;\n          }\n          0% {\n            stroke-dasharray: 527.67;\n          }\n          100% {\n            stroke-dasharray: 527.67;\n          }\n        }\n        @-webkit-keyframes kf_el_5BNAI_PBsn_an_tQV_CQebU {\n          50% {\n            stroke-dashoffset: 527.67;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 527.67;\n          }\n        }\n        @keyframes kf_el_5BNAI_PBsn_an_tQV_CQebU {\n          50% {\n            stroke-dashoffset: 527.67;\n          }\n          100% {\n            stroke-dashoffset: 0;\n          }\n          0% {\n            stroke-dashoffset: 527.67;\n          }\n        }\n        #el_bYTVKD04y * {\n          -webkit-animation-duration: 1s;\n          animation-duration: 1s;\n          -webkit-animation-iteration-count: 1;\n          animation-iteration-count: 1;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n        #el_doMgf96Cxx {\n          fill: none;\n          -webkit-transform: translate(1px, -5px);\n          transform: translate(1px, -5px);\n        }\n        #el_5BNAI_PBsn {\n          stroke: #ff0039;\n          stroke-width: 14;\n          -webkit-animation-fill-mode: forwards, forwards;\n          animation-fill-mode: forwards, forwards;\n          -webkit-animation-name: kf_el_5BNAI_PBsn_an_tQV_CQebU,\n            kf_el_5BNAI_PBsn_an_aToWhdlG8F;\n          animation-name: kf_el_5BNAI_PBsn_an_tQV_CQebU,\n            kf_el_5BNAI_PBsn_an_aToWhdlG8F;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1);\n        }\n        #el_q_eIK0z3HI {\n          fill: #ff0042;\n        }\n        #el_IAuv9ut-2- {\n          stroke: #ff0042;\n          stroke-width: 14;\n          -webkit-animation-fill-mode: forwards, forwards, forwards;\n          animation-fill-mode: forwards, forwards, forwards;\n          -webkit-animation-name: kf_el_IAuv9ut-2-_an_xo_EIWruT,\n            kf_el_IAuv9ut-2-_an_29XE36SGo1, kf_el_IAuv9ut-2-_an_xlDuvYsRc;\n          animation-name: kf_el_IAuv9ut-2-_an_xo_EIWruT,\n            kf_el_IAuv9ut-2-_an_29XE36SGo1, kf_el_IAuv9ut-2-_an_xlDuvYsRc;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1),\n            cubic-bezier(0, 0, 1, 1), cubic-bezier(0, 0, 1, 1);\n        }\n        #el_q_eIK0z3HI_an_045tZJOHl {\n          -webkit-animation-fill-mode: forwards;\n          animation-fill-mode: forwards;\n          -webkit-animation-name: kf_el_q_eIK0z3HI_an_045tZJOHl;\n          animation-name: kf_el_q_eIK0z3HI_an_045tZJOHl;\n          -webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);\n          animation-timing-function: cubic-bezier(0, 0, 1, 1);\n        }\n      ");
			g_1 = svg_element("g");
			path = svg_element("path");
			g = svg_element("g");
			circle = svg_element("circle");
			path_1 = svg_element("path");
			attr(path, "d", "m96.9442719 17.8885438 71.8196601 143.6393202c2.469893\n          4.939785.467649 10.946515-4.472136 13.416408-1.388554.694277-2.919685\n          1.055728-4.472136 1.055728h-143.6393201c-5.5228475\n          0-10.00000001-4.477153-10.00000001-10 0-1.552451.36145092-3.083582\n          1.05572809-4.472136l71.81966012-143.6393202c2.4698925-4.939785\n          8.4766229-6.9420284 13.4164079-4.4721359 1.935274.967637 3.5044989\n          2.5368619 4.4721359 4.4721359z");
			attr(path, "stroke-linejoin", "round");
			attr(path, "id", "el_5BNAI_PBsn");
			attr(circle, "cx", "88.5");
			attr(circle, "cy", "144.5");
			attr(circle, "r", "7.5");
			attr(circle, "id", "el_q_eIK0z3HI");
			attr(g, "id", "el_q_eIK0z3HI_an_045tZJOHl");
			attr(g, "data-animator-group", "true");
			attr(g, "data-animator-type", "2");
			attr(path_1, "d", "m88.5 112.413086v-39.413086");
			attr(path_1, "stroke-linecap", "round");
			attr(path_1, "stroke-linejoin", "round");
			attr(path_1, "id", "el_IAuv9ut-2-");
			attr(g_1, "fill-rule", "evenodd");
			attr(g_1, "id", "el_doMgf96Cxx");
			attr(svg, "viewBox", "0 0 178 178");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "id", "el_bYTVKD04y");
		},

		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, style);
			append(style, t);
			append(svg, g_1);
			append(g_1, path);
			append(g_1, g);
			append(g, circle);
			append(g_1, path_1);
		},

		d(detaching) {
			if (detaching) {
				detach(svg);
			}
		}
	};
}

function create_fragment(ctx) {
	var div, t0, t1, t2;

	var if_block0 = (ctx.type === 'hint') && create_if_block_3();

	var if_block1 = (ctx.type === 'pending') && create_if_block_2();

	var if_block2 = (ctx.type === 'success') && create_if_block_1();

	var if_block3 = (ctx.type === 'error') && create_if_block();

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			attr(div, "class", "bn-notify-custom bn-notify-notification-status-icon svelte-16i17ha");
		},

		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);
			if (if_block2) if_block2.m(div, null);
			append(div, t2);
			if (if_block3) if_block3.m(div, null);
		},

		p(changed, ctx) {
			if (ctx.type === 'hint') {
				if (!if_block0) {
					if_block0 = create_if_block_3();
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (ctx.type === 'pending') {
				if (!if_block1) {
					if_block1 = create_if_block_2();
					if_block1.c();
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (ctx.type === 'success') {
				if (!if_block2) {
					if_block2 = create_if_block_1();
					if_block2.c();
					if_block2.m(div, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (ctx.type === 'error') {
				if (!if_block3) {
					if_block3 = create_if_block();
					if_block3.c();
					if_block3.m(div, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(div);
			}

			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { type } = $$props;

	$$self.$set = $$props => {
		if ('type' in $$props) $$invalidate('type', type = $$props.type);
	};

	return { type };
}

class TypeIcon extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-16i17ha-style")) add_css();
		init$1(this, options, instance, create_fragment, safe_not_equal, ["type"]);
	}
}

function argsEqual(args1, args2) {
  return JSON.stringify(args1) === JSON.stringify(args2);
}
function timeString(time) {
  const seconds = Math.floor(time / 1000);
  return seconds >= 60 ? `${Math.floor(seconds / 60)} min` : `${seconds} sec`;
}
function formatTime(number) {
  const time = new Date(number);
  return time.toLocaleString("en-US", {
    hour: "numeric",
    minute: "numeric",
    hour12: true
  });
}
function removeUndefined(obj) {
  return Object.keys(obj).reduce((newObj, key) => {
    if (obj[key] !== undefined) {
      newObj[key] = obj[key];
    }

    return newObj;
  }, {});
} // will update object(merge new data) in list if it passes predicate, otherwise adds new object

function updateOrAdd(list, predicate, data) {
  const clone = [...list];
  const index = clone.findIndex(predicate);

  if (index !== -1) {
    clone[index] = { ...clone[index],
      ...removeUndefined(data)
    };
    return clone;
  }

  return [...list, removeUndefined(data)];
}
function extractMessageFromError(error) {
  if (!error.stack || !error.message) {
    return {
      eventCode: "txError",
      errorMsg: "An unknown error occured"
    };
  }

  const message = error.stack || error.message;

  if (message.includes("User denied transaction signature")) {
    return {
      eventCode: "txSendFail",
      errorMsg: "User denied transaction signature"
    };
  }

  if (message.includes("transaction underpriced")) {
    return {
      eventCode: "txUnderpriced",
      errorMsg: "Transaction is under priced"
    };
  }

  return {
    eventCode: "txError",
    errorMsg: message
  };
}

const app = writable({
  version: null,
  dappId: null,
  networkId: null,
  nodeSynced: true
});
const accounts = writable([]);
const contracts = writable([]);
const transactions = createTransactionStore([]);
const notifications = createNotificationStore([]);
const configuration = writable({
  mobilePosition: null,
  desktopPosition: null,
  darkMode: null,
  txApproveReminderTimeout: null,
  txStallPendingTimeout: null,
  txStallConfirmedTimeout: null
});

function createTransactionStore(initialState) {
  const {
    subscribe,
    update
  } = writable(initialState);

  function updateQueue(transaction) {
    const predicate = tx => tx.id === transaction.id;

    update(store => {
      return updateOrAdd(store, predicate, transaction);
    });
  }

  function add(transaction) {
    update(store => [...store, transaction]);
  }

  return {
    subscribe,
    updateQueue,
    add
  };
}

function createNotificationStore(initialState) {
  const {
    subscribe,
    update
  } = writable(initialState);

  function add(notification) {
    update(store => {
      const existingNotification = store.find(n => n.id === notification.id); // if notification is a hint type or there are no existing notifications with same id, then just add it.

      if (notification.type === "hint" || !existingNotification) {
        return [...store, notification];
      } // otherwise filter out all notifications with the same id and then add the new notification


      return [...store.filter(n => n.id !== notification.id), notification];
    });
  }

  function remove({
    id,
    eventCode
  }) {
    update(store => store.filter(n => n.id !== id || n.eventCode !== eventCode));
  }

  return {
    subscribe,
    add,
    remove,
    update
  };
}

/* src/components/CloseIcon.svelte generated by Svelte v3.12.1 */

function add_css$1() {
	var style = element("style");
	style.id = 'svelte-1ct981s-style';
	style.textContent = "div.svelte-1ct981s{display:flex;justify-content:center;align-items:center;padding:0.3rem;border-radius:40px;transition:background 150ms ease-in-out}div.svelte-1ct981s:hover{background:#eeeeee;cursor:pointer}.bn-notify-dark-mode-close-background.svelte-1ct981s:hover{background:#00222c}";
	append(document.head, style);
}

function create_fragment$1(ctx) {
	var div, svg, g, path0, path1, g_stroke_value, dispose;

	return {
		c() {
			div = element("div");
			svg = svg_element("svg");
			g = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr(path0, "d", "m.1.1 7.82304289 7.82304289");
			attr(path1, "d", "m.1.1 7.82304289 7.82304289");
			attr(path1, "transform", "matrix(-1 0 0 1 8 0)");
			attr(g, "fill", "none");
			attr(g, "stroke", g_stroke_value = ctx.hovered ? (ctx.$configuration.darkMode ? '#ffffff' : '#4a4a4a') : '#9B9B9B');
			attr(g, "stroke-linecap", "square");
			attr(g, "stroke-width", "2");
			set_style(g, "transition", "stroke 150ms ease-in-out");
			attr(g, "transform", "translate(2 2)");
			attr(svg, "height", "8");
			attr(svg, "viewBox", "0 0 12 12");
			attr(svg, "width", "8");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(div, "class", "bn-notify-custom bn-notify-notification-close-icon svelte-1ct981s");
			toggle_class(div, "bn-notify-dark-mode-close-background", ctx.$configuration.darkMode);

			dispose = [
				listen(div, "mouseenter", ctx.mouseenter_handler),
				listen(div, "mouseleave", ctx.mouseleave_handler)
			];
		},

		m(target, anchor) {
			insert(target, div, anchor);
			append(div, svg);
			append(svg, g);
			append(g, path0);
			append(g, path1);
		},

		p(changed, ctx) {
			if ((changed.hovered || changed.$configuration) && g_stroke_value !== (g_stroke_value = ctx.hovered ? (ctx.$configuration.darkMode ? '#ffffff' : '#4a4a4a') : '#9B9B9B')) {
				attr(g, "stroke", g_stroke_value);
			}

			if (changed.$configuration) {
				toggle_class(div, "bn-notify-dark-mode-close-background", ctx.$configuration.darkMode);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(div);
			}

			run_all(dispose);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let $configuration;

	component_subscribe($$self, configuration, $$value => { $configuration = $$value; $$invalidate('$configuration', $configuration); });

	let hovered;

	const mouseenter_handler = () => ($$invalidate('hovered', hovered = true));

	const mouseleave_handler = () => ($$invalidate('hovered', hovered = false));

	return {
		hovered,
		$configuration,
		mouseenter_handler,
		mouseleave_handler
	};
}

class CloseIcon extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1ct981s-style")) add_css$1();
		init$1(this, options, instance$1, create_fragment$1, safe_not_equal, []);
	}
}

/* src/components/AutoDismiss.svelte generated by Svelte v3.12.1 */

function create_fragment$2(ctx) {
	return {
		c: noop,
		m: noop,
		p: noop,
		i: noop,
		o: noop,
		d: noop
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let { notification } = $$props;

  if (notification.autoDismiss) {
    setTimeout(() => {
      notifications.remove(notification);
    }, notification.autoDismiss);
  }

	$$self.$set = $$props => {
		if ('notification' in $$props) $$invalidate('notification', notification = $$props.notification);
	};

	return { notification };
}

class AutoDismiss extends SvelteComponent {
	constructor(options) {
		super();
		init$1(this, options, instance$2, create_fragment$2, safe_not_equal, ["notification"]);
	}
}

/* src/views/Notify.svelte generated by Svelte v3.12.1 */

function add_css$2() {
	var style = element("style");
	style.id = 'svelte-1m0g3hh-style';
	style.textContent = "ul.svelte-1m0g3hh{display:flex;flex-flow:column nowrap;position:fixed;padding:0 0.75rem;margin:0;list-style-type:none;width:20rem;bottom:0;right:0;font-family:\"Helvetica Neue\";max-height:100vh;overflow-y:scroll;overflow-x:hidden;color:#4a4a4a;background:transparent;scrollbar-width:none;box-sizing:border-box;height:100vh;pointer-events:none;z-index:9}@media only screen and (max-width: 450px){ul.svelte-1m0g3hh{width:100%}}.bn-notify-custom.bn-notify-dark-mode{background:#283944;color:#ffffff;background:rgba(40, 57, 68, 0.9)}.bn-notify-clickable:hover{cursor:pointer}.svelte-1m0g3hh::-webkit-scrollbar{display:none}li.svelte-1m0g3hh{position:relative;display:flex;padding:0.75rem;font-size:0.889rem;border-radius:10px;background:#ffffff;box-shadow:0px 2px 10px rgba(0, 0, 0, 0.1);color:inherit;transition:background 300ms ease-in-out, color 300ms ease-in-out;pointer-events:all;background:#ffffff;backdrop-filter:blur(5px);background:rgba(255, 255, 255, 0.8)}div.svelte-1m0g3hh:nth-child(2){display:flex;flex-flow:column nowrap;justify-content:center;margin-left:0.75rem;max-width:78%}div.svelte-1m0g3hh:nth-child(2) p.svelte-1m0g3hh:nth-child(1){margin:0}div.svelte-1m0g3hh:nth-child(2) p.svelte-1m0g3hh:nth-child(2){margin:0.5rem 0 0 0;opacity:0.7;font-size:0.79rem}div.svelte-1m0g3hh:nth-child(2) p:nth-child(2) i.svelte-1m0g3hh{width:15px;height:16px;display:inline-block;background-image:url(\"https://assist.blocknative.com/images/jJu8b0B.png\");background-position:-66px 0px;vertical-align:sub}div.svelte-1m0g3hh:nth-child(3){position:absolute;top:0.75rem;right:0.75rem}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.notification = list[i];
	child_ctx.i = i;
	return child_ctx;
}

// (206:0) {#if $notifications.length > 0}
function create_if_block$1(ctx) {
	var ul, each_blocks = [], each_1_lookup = new Map(), ul_style_value, current;

	let each_value = ctx.$notifications;

	const get_key = ctx => ctx.notification.key;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
			attr(ul, "class", "bn-notify-custom bn-notify-notifications svelte-1m0g3hh");
			attr(ul, "style", ul_style_value = `${ctx.positioning} ${ctx.justifyContent}`);
		},

		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;
		},

		p(changed, ctx) {
			const each_value = ctx.$notifications;

			group_outros();
			for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
			each_blocks = update_keyed_each(each_blocks, changed, get_key, 1, ctx, each_value, each_1_lookup, ul, fix_and_outro_and_destroy_block, create_each_block, null, get_each_context);
			for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
			check_outros();

			if ((!current || changed.positioning || changed.justifyContent) && ul_style_value !== (ul_style_value = `${ctx.positioning} ${ctx.justifyContent}`)) {
				attr(ul, "style", ul_style_value);
			}
		},

		i(local) {
			if (current) return;
			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},

		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(ul);
			}

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

// (228:12) {#if notification.type === 'pending' && notification.startTime}
function create_if_block_1$1(ctx) {
	var span1, t0, i, t1, span0, t2_value = timeString(ctx.currentTime - ctx.notification.startTime) + "", t2;

	return {
		c() {
			span1 = element("span");
			t0 = text("-\n                ");
			i = element("i");
			t1 = space();
			span0 = element("span");
			t2 = text(t2_value);
			attr(i, "class", "bn-notify-custom bn-notify-notification-info-meta-clock svelte-1m0g3hh");
			attr(span0, "class", "bn-notify-custom\n                  bn-notify-notification-info-meta-duration-time svelte-1m0g3hh");
			attr(span1, "class", "bn-notify-custom\n                bn-notify-notification-info-meta-duration svelte-1m0g3hh");
		},

		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, t0);
			append(span1, i);
			append(span1, t1);
			append(span1, span0);
			append(span0, t2);
		},

		p(changed, ctx) {
			if ((changed.currentTime || changed.$notifications) && t2_value !== (t2_value = timeString(ctx.currentTime - ctx.notification.startTime) + "")) {
				set_data(t2, t2_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(span1);
			}
		}
	};
}

// (210:4) {#each $notifications as notification, i (notification.key)}
function create_each_block(key_1, ctx) {
	var li, t0, div0, p0, t1_value = ctx.notification.message + "", t1, t2, p1, span, t3, t4, t5, div1, t6, t7, li_intro, li_outro, rect, stop_animation = noop, current, dispose;

	var typeicon = new TypeIcon({ props: { type: ctx.notification.type } });

	var if_block = (ctx.notification.type === 'pending' && ctx.notification.startTime) && create_if_block_1$1(ctx);

	var closeicon = new CloseIcon({});

	function click_handler() {
		return ctx.click_handler(ctx);
	}

	var autodismiss = new AutoDismiss({ props: { notification: ctx.notification } });

	return {
		key: key_1,

		first: null,

		c() {
			li = element("li");
			typeicon.$$.fragment.c();
			t0 = space();
			div0 = element("div");
			p0 = element("p");
			t1 = text(t1_value);
			t2 = space();
			p1 = element("p");
			span = element("span");
			t3 = text(ctx.formattedTime);
			t4 = space();
			if (if_block) if_block.c();
			t5 = space();
			div1 = element("div");
			closeicon.$$.fragment.c();
			t6 = space();
			autodismiss.$$.fragment.c();
			t7 = space();
			attr(p0, "class", "svelte-1m0g3hh");
			attr(span, "class", "bn-notify-custom bn-notify-notification-info-meta-timestamp svelte-1m0g3hh");
			attr(p1, "class", "bn-notify-custom bn-notify-notification-info-meta svelte-1m0g3hh");
			attr(div0, "class", "bn-notify-custom bn-notify-notification-info svelte-1m0g3hh");
			attr(div1, "class", "bn-notify-custom bn-notify-notification-close svelte-1m0g3hh");
			attr(li, "style", ctx.notificationMargin);
			attr(li, "class", "bn-notify-custom bn-notify-notification svelte-1m0g3hh");
			toggle_class(li, "bn-notify-dark-mode", ctx.$configuration.darkMode);
			toggle_class(li, "bn-notify-clickable", ctx.notification.onclick);

			dispose = [
				listen(div1, "click", click_handler),
				listen(li, "click", ctx.notification.onclick)
			];

			this.first = li;
		},

		m(target, anchor) {
			insert(target, li, anchor);
			mount_component(typeicon, li, null);
			append(li, t0);
			append(li, div0);
			append(div0, p0);
			append(p0, t1);
			append(div0, t2);
			append(div0, p1);
			append(p1, span);
			append(span, t3);
			append(p1, t4);
			if (if_block) if_block.m(p1, null);
			append(li, t5);
			append(li, div1);
			mount_component(closeicon, div1, null);
			append(li, t6);
			mount_component(autodismiss, li, null);
			append(li, t7);
			current = true;
		},

		p(changed, new_ctx) {
			ctx = new_ctx;
			var typeicon_changes = {};
			if (changed.$notifications) typeicon_changes.type = ctx.notification.type;
			typeicon.$set(typeicon_changes);

			if ((!current || changed.$notifications) && t1_value !== (t1_value = ctx.notification.message + "")) {
				set_data(t1, t1_value);
			}

			if (ctx.notification.type === 'pending' && ctx.notification.startTime) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					if_block.m(p1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			var autodismiss_changes = {};
			if (changed.$notifications) autodismiss_changes.notification = ctx.notification;
			autodismiss.$set(autodismiss_changes);

			if (!current || changed.notificationMargin) {
				attr(li, "style", ctx.notificationMargin);
			}

			if (changed.$configuration) {
				toggle_class(li, "bn-notify-dark-mode", ctx.$configuration.darkMode);
			}

			if (changed.$notifications) {
				toggle_class(li, "bn-notify-clickable", ctx.notification.onclick);
			}
		},

		r() {
			rect = li.getBoundingClientRect();
		},

		f() {
			fix_position(li);
			stop_animation();
			add_transform(li, rect);
		},

		a() {
			stop_animation();
			stop_animation = create_animation(li, rect, flip, { duration: 500 });
		},

		i(local) {
			if (current) return;
			transition_in(typeicon.$$.fragment, local);

			transition_in(closeicon.$$.fragment, local);

			transition_in(autodismiss.$$.fragment, local);

			add_render_callback(() => {
				if (li_outro) li_outro.end(1);
				if (!li_intro) li_intro = create_in_transition(li, fly, { duration: 1200, delay: 300, x: ctx.x, y: ctx.y, easing: elasticOut });
				li_intro.start();
			});

			current = true;
		},

		o(local) {
			transition_out(typeicon.$$.fragment, local);
			transition_out(closeicon.$$.fragment, local);
			transition_out(autodismiss.$$.fragment, local);
			if (li_intro) li_intro.invalidate();

			li_outro = create_out_transition(li, fly, { duration: 400, x: ctx.x, y: ctx.y, easing: quintIn });

			current = false;
		},

		d(detaching) {
			if (detaching) {
				detach(li);
			}

			destroy_component(typeicon);

			if (if_block) if_block.d();

			destroy_component(closeicon);

			destroy_component(autodismiss);

			if (detaching) {
				if (li_outro) li_outro.end();
			}

			run_all(dispose);
		}
	};
}

function create_fragment$3(ctx) {
	var if_block_anchor, current;

	var if_block = (ctx.$notifications.length > 0) && create_if_block$1(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},

		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},

		p(changed, ctx) {
			if (ctx.$notifications.length > 0) {
				if (if_block) {
					if_block.p(changed, ctx);
					transition_in(if_block, 1);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();
				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});
				check_outros();
			}
		},

		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},

		o(local) {
			transition_out(if_block);
			current = false;
		},

		d(detaching) {
			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

function elasticOut(t) {
  return (
    Math.sin((-13.0 * (t + 1.0) * Math.PI) / 2) * Math.pow(2.0, -35.0 * t) +
    1.0
  );
}

function instance$3($$self, $$props, $$invalidate) {
	let $configuration, $notifications;

	component_subscribe($$self, configuration, $$value => { $configuration = $$value; $$invalidate('$configuration', $configuration); });
	component_subscribe($$self, notifications, $$value => { $notifications = $$value; $$invalidate('$notifications', $notifications); });

	

  let smallScreen = window.innerWidth < 420;

  let positioning;
  let x;
  let y;
  let notificationMargin;
  let justifyContent;

  // listen for screen resize events
  window.addEventListener(
    "resize",
    debounce(() => {
      if (window.innerWidth < 420) {
        if (!smallScreen) {
          $$invalidate('smallScreen', smallScreen = true);
        }
      } else {
        if (smallScreen) {
          $$invalidate('smallScreen', smallScreen = false);
        }
      }
    }, 300)
  );

  let currentTime = Date.now();

  const intervalId = setInterval(() => {
    $$invalidate('currentTime', currentTime = Date.now());
  }, 1000);

  onDestroy(() => clearInterval(intervalId));

  const formattedTime = formatTime(currentTime);

	const click_handler = ({ notification }) => notifications.remove(notification);

	$$self.$$.update = ($$dirty = { $configuration: 1, smallScreen: 1, positioning: 1 }) => {
		if ($$dirty.$configuration || $$dirty.smallScreen || $$dirty.positioning) { if ($configuration.desktopPosition && !smallScreen) {
        $$invalidate('positioning', positioning =
          $configuration.desktopPosition === "bottomRight"
            ? "bottom: 0; right: 0;"
            : $configuration.desktopPosition === "bottomLeft"
            ? "left: 0; right: unset;"
            : $configuration.desktopPosition === "topRight"
            ? "top: 0;"
            : "top: 0; bottom: unset; left: 0; right: unset;");
    
        $$invalidate('x', x = positioning && positioning.includes("left") ? -321 : 321);
        $$invalidate('y', y = 0);
    
        if ($configuration.desktopPosition.includes("top")) {
          $$invalidate('justifyContent', justifyContent = "justify-content: unset;");
          $$invalidate('notificationMargin', notificationMargin = "margin: 0.75rem 0 0 0;");
        } else {
          $$invalidate('justifyContent', justifyContent = "justify-content: flex-end;");
          $$invalidate('notificationMargin', notificationMargin = "margin: 0 0 0.75rem 0;");
        }
      } }
		if ($$dirty.$configuration || $$dirty.smallScreen) { if ($configuration.mobilePosition && smallScreen) {
        $$invalidate('positioning', positioning =
          $configuration.mobilePosition === "top"
            ? "top: 0; bottom: unset;"
            : "bottom: 0; top: unset;");
    
        $$invalidate('x', x = 0);
    
        if ($configuration.mobilePosition === "top") {
          $$invalidate('y', y = -50);
          $$invalidate('justifyContent', justifyContent = "justify-content: unset;");
          $$invalidate('notificationMargin', notificationMargin = "margin: 0.75rem 0 0 0;");
        } else {
          $$invalidate('y', y = 50);
          $$invalidate('justifyContent', justifyContent = "justify-content: flex-end;");
          $$invalidate('notificationMargin', notificationMargin = "margin: 0 0 0.75rem 0;");
        }
      } }
		if ($$dirty.$configuration || $$dirty.smallScreen) { if (!$configuration.desktopPosition && !$configuration.mobilePosition) {
        $$invalidate('x', x = smallScreen ? 0 : 321);
        $$invalidate('y', y = smallScreen ? 50 : 0);
        $$invalidate('notificationMargin', notificationMargin = "margin: 0 0 0.75rem 0;");
        $$invalidate('justifyContent', justifyContent = "justify-content: flex-end;");
        $$invalidate('positioning', positioning = "bottom: 0; right: 0;");
      } }
	};

	return {
		positioning,
		x,
		y,
		notificationMargin,
		justifyContent,
		currentTime,
		formattedTime,
		$configuration,
		$notifications,
		click_handler
	};
}

class Notify extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1m0g3hh-style")) add_css$2();
		init$1(this, options, instance$3, create_fragment$3, safe_not_equal, []);
	}
}

function eventToType(eventCode) {
  switch (eventCode) {
    case "txSent":
    case "txPool":
    case "txSpeedUp":
    case "txCancel":
      return "pending";

    case "txRequest":
    case "txRepeat":
    case "txAwaitingApproval":
    case "txConfirmReminder":
    case "txStallPending":
    case "txStallConfirmed":
      return "hint";

    case "txError":
    case "txSendFail":
    case "txFailed":
    case "txDropped":
    case "nsfFail":
    case "txUnderpriced":
      return "error";

    case "txConfirmed":
      return "success";

    default:
      return "hint";
  }
}
function typeToDismissTimeout(type) {
  switch (type) {
    case "success":
    case "hint":
      return 4000;

    default:
      return false;
  }
}
const txTimeouts = {
  txApproveReminderTimeout: 20000,
  txStallPendingTimeout: 20000,
  txStallConfirmedTimeout: 90000
};

let formatter;

_.subscribe(store => formatter = store);

function createNotification(details, customization = {}) {
  const {
    id,
    hash,
    startTime,
    eventCode,
    direction,
    counterparty,
    value
  } = details;
  const type = eventToType(eventCode);
  const key = `${id}-${customization.eventCode || eventCode}`;
  const counterpartyShortened = counterparty && counterparty.substring(0, 4) + "..." + counterparty.substring(counterparty.length - 4);
  const formatterOptions = counterparty ? [`watched.${eventCode}`, {
    verb: eventCode === "txConfirmed" ? direction === "incoming" ? "received" : "sent" : direction === "incoming" ? "receiving" : "sending",
    formattedValue: value / 1000000000000000000,
    preposition: direction === "incoming" ? "from" : "to",
    counterpartyShortened
  }] : [`transaction.${eventCode}`];
  const notificationObject = {
    id: id || hash,
    type,
    key,
    startTime,
    eventCode,
    message: formatter(...formatterOptions),
    autoDismiss: typeToDismissTimeout(type),
    ...customization
  };
  notifications.add(notificationObject);
}

function validateInit(init) {
  ow(init, "Initialization Options", ow.object.exactShape({
    dappId: ow.string,
    networkId: ow.number
  }));
}
function validateTransactionOptions(options) {
  ow(options, "Transaction Options", ow.object.exactShape({
    sendTransaction: ow.optional.function,
    estimateGas: ow.optional.function,
    gasPrice: ow.optional.function,
    balance: ow.optional.string,
    contract: ow.optional.object.exactShape({
      methodName: ow.string,
      params: ow.optional.array.nonEmpty
    }),
    txDetails: ow.optional.object.exactShape({
      to: ow.string,
      value: function stringOrNumber(val) {
        return typeof val === "string" || typeof val === "number" || `${val} is not a valid string or number`;
      }
    }),
    listeners: ow.optional.object.exactShape({
      txRequest: ow.optional.function,
      nsfFail: ow.optional.function,
      txRepeat: ow.optional.function,
      txAwaitingApproval: ow.optional.function,
      txConfirmReminder: ow.optional.function,
      txSendFail: ow.optional.function,
      txError: ow.optional.function,
      txUnderPriced: ow.optional.function
    })
  }));
}
function validateNotificationObject(notification) {
  ow(notification, "notification", ow.object.exactShape({
    type: ow.optional.string.is(validNotificationType),
    message: ow.string,
    autoDismiss: ow.optional.number,
    onclick: ow.optional.function
  }));
}
function validateConfig(config) {
  ow(config, "config", ow.object.exactShape({
    mobilePosition: ow.optional.string.is(validMobilePosition),
    desktopPosition: ow.optional.string.is(validDesktopPosition),
    darkMode: ow.optional.boolean,
    txApproveReminderTimeout: ow.optional.number,
    txStallPendingTimeout: ow.optional.number,
    txStallConfirmedTimeout: ow.optional.number
  }));
}

function validNotificationType(type) {
  switch (type) {
    case "hint":
    case "pending":
    case "error":
    case "success":
      return true;

    default:
      return `${type} is not a valid notification type`;
  }
}

function validMobilePosition(position) {
  return position === "top" || position === "bottom" || `${position} is not a valid mobile notification position`;
}

function validDesktopPosition(position) {
  switch (position) {
    case "bottomLeft":
    case "bottomRight":
    case "topLeft":
    case "topRight":
      return true;

    default:
      return `${position} is not a valid desktop notification position`;
  }
}

let transactionQueue;
transactions.subscribe(store => transactionQueue = store);
function handlePreFlightEvent({
  eventCode,
  contract,
  balance,
  txObject,
  listeners,
  blocknative,
  status
}) {
  blocknative.event({
    categoryCode: contract ? "activeContract" : "activeTransaction",
    eventCode,
    transaction: txObject,
    wallet: {
      balance
    },
    contract
  });
  const transaction = { ...txObject,
    eventCode,
    status,
    contractCall: contract
  };
  const emitterResult = listeners[eventCode] && listeners[eventCode](transaction);

  if (emitterResult) {
    validateNotificationObject(emitterResult);
  }

  handleTransactionEvent({
    transaction: transaction,
    emitterResult
  });
}
function handleTransactionEvent({
  transaction,
  emitterResult
}) {
  // transaction queue alread has tx with same id and same eventCode then don't update
  // this is to allow for the fact that the server mirrors events sent to it
  if (transactionQueue.find(tx => tx.id === transaction.id && tx.eventCode === transaction.eventCode)) {
    return;
  }

  transactions.updateQueue(transaction); // create notification if dev hasn't opted out

  if (emitterResult !== false) {
    const transactionObj = transactionQueue.find(tx => tx.id === transaction.id);
    createNotification(transactionObj, emitterResult);
  }
}
function duplicateTransactionCandidate(transaction, contract) {
  let duplicate = transactionQueue.find(tx => {
    if (contract && typeof tx.contract === "undefined") return false;
    const sameMethod = contract ? contract.methodName === tx.contract.methodName : true;
    const sameParams = contract ? argsEqual(contract.parameters, tx.contract.parameters) : true;
    return sameMethod && sameParams && tx.value == transaction.value && tx.to.toLowerCase() === transaction.to.toLowerCase();
  });

  if (duplicate && (duplicate.status === "confirmed" || duplicate.status === "failed")) {
    duplicate = false;
  }

  return duplicate;
}

console.log(blocknativeSdk);
const version = "0.0.1";
let transactionQueue$1;
transactions.subscribe(store => transactionQueue$1 = store);

function init(initialize) {
  validateInit(initialize);
  const {
    dappId,
    networkId
  } = initialize;
  const blocknative = blocknativeSdk({
    dappId,
    networkId,
    transactionCallback: handleTransactionEvent
  }); // save config to app store

  app.update(store => ({ ...store,
    ...initialize,
    version
  })); // initialize App

  new Notify({
    target: document.body
  }); // set the dictionary for i18n

  dictionary.set(notifyMessages); // set the locale for i18n

  locale.set(getClientLocale({
    fallback: "en-US",
    navigator: true
  }));
  return {
    account,
    hash,
    transaction,
    notification,
    config
  };

  function account(address) {
    try {
      const {
        emitter
      } = blocknative.account(address);
      return emitter;
    } catch (error) {
      throw new Error(error);
    }
  }

  function hash(hash, id) {
    try {
      const {
        emitter
      } = blocknative.transaction(hash, id);
      return emitter;
    } catch (error) {
      throw new Error(error);
    }
  }

  function transaction(options) {
    return new Promise(async (resolve, reject) => {
      validateTransactionOptions(options);
      const {
        sendTransaction,
        estimateGas,
        gasPrice,
        balance,
        contract,
        txDetails,
        listeners
      } = options; //=== if `balance` is not provided, then sufficient funds check is disabled === //
      //=== if `txDetails` is not provided, then duplicate transaction check is disabled === //
      //== if dev doesn't want notifiy to intiate the transaction and `sendTransaction` is not provided, then transaction rejected notification is disabled ==//
      //=== to disable hints for `txAwaitingApproval`, `txConfirmReminder` or any other notification, then return false from listener functions ==//

      const gasLimit = estimateGas && bigInt((await estimateGas().catch(err => console.error("There was a problem estimating gas:", err))));
      const price = gasPrice && bigInt((await gasPrice().catch(err => console.error("There was a problem getting current gas price:", err))));
      const id = uuid();
      const txObject = { ...txDetails,
        value: String(txDetails.value),
        gas: gasLimit && gasLimit.toString(),
        gasPrice: price && price.toString(),
        id
      }; // check sufficient balance if required parameters are available

      if (balance && gasLimit && gasPrice) {
        const transactionCost = gasLimit.times(price).plus(bigInt(txDetails.value)); // if transaction cost is greater than the current balance

        if (transactionCost.compare(bigInt(balance)) === 1) {
          const eventCode = "nsfFail";
          handlePreFlightEvent({
            blocknative,
            eventCode,
            contract,
            balance,
            txObject,
            listeners
          });
          return reject("User has insufficient funds");
        }
      } // check if it is a duplicate transaction


      if (txDetails && duplicateTransactionCandidate({
        to: txDetails.to,
        value: txDetails.value
      }, contract)) {
        const eventCode = "txRepeat";
        handlePreFlightEvent({
          blocknative,
          eventCode,
          contract,
          balance,
          txObject,
          listeners
        });
      } // get any timeout configurations


      const {
        txApproveReminderTimeout,
        txStallPendingTimeout,
        txStallConfirmedTimeout
      } = get(configuration); // check previous transactions awaiting approval

      if (transactionQueue$1.find(tx => tx.status === "awaitingApproval")) {
        const eventCode = "txAwaitingApproval";
        handlePreFlightEvent({
          blocknative,
          eventCode,
          contract,
          balance,
          txObject,
          listeners
        });
      } // confirm reminder after timeout


      setTimeout(() => {
        const awaitingApproval = transactionQueue$1.find(tx => tx.id === id && tx.status === "awaitingApproval");

        if (awaitingApproval) {
          const eventCode = "txConfirmReminder";
          handlePreFlightEvent({
            blocknative,
            eventCode,
            contract,
            balance,
            txObject,
            listeners
          });
        }
      }, txApproveReminderTimeout || txTimeouts.txApproveReminderTimeout);
      handlePreFlightEvent({
        blocknative,
        eventCode: "txRequest",
        status: "awaitingApproval",
        contract,
        balance,
        txObject,
        listeners
      }); // if not provided with sendTransaction function, resolve with id so dev can initiate transaction
      // dev will need to call notify.hash(txHash, id) with this id to link up the preflight with the postflight notifications

      if (!sendTransaction) {
        return resolve({
          id
        });
      } // initiate transaction


      const sendTransactionResult = sendTransaction(); // get result and handle errors

      const result = await sendTransactionResult.catch(error => {
        const {
          eventCode,
          errorMsg
        } = extractMessageFromError(error);
        handlePreFlightEvent({
          blocknative,
          eventCode,
          status: "failed",
          contract,
          balance,
          txObject,
          listeners
        });
        return reject(errorMsg);
      });

      if (result && result.hash) {
        const emitter = hash(result.hash, id); // Check for pending stall status

        setTimeout(() => {
          const transaction = transactionQueue$1.find(tx => tx.id === id);

          if (transaction && transaction.status === "sent" && blocknative.status.connected && blocknative.status.nodeSynced) {
            const eventCode = "txStallPending";
            handlePreFlightEvent({
              blocknative,
              eventCode,
              contract,
              balance,
              txObject,
              listeners
            });
          }
        }, txStallPendingTimeout || txTimeouts.txStallPendingTimeout); // Check for confirmed stall status

        setTimeout(() => {
          const transaction = transactionQueue$1.find(tx => tx.id === id);

          if (transaction && transaction.status === "pending" && blocknative.status.connected && blocknative.status.nodeSynced) {
            const eventCode = "txStallConfirmed";
            handlePreFlightEvent({
              blocknative,
              eventCode,
              contract,
              balance,
              txObject,
              listeners
            });
          }
        }, txStallConfirmedTimeout || txTimeouts.txStallConfirmedTimeout);
        resolve({
          emitter,
          sendTransactionResult
        });
      }
    });
  }

  function notification(eventCode, notificationObject) {
    validateNotificationObject(notificationObject);
    const id = uuid();
    const startTime = Date.now();

    const dismiss = () => notifications.remove({
      id,
      eventCode
    });

    function update(eventCode, notificationUpdate) {
      validateNotificationObject(notificationUpdate);
      createNotification({
        id,
        startTime,
        eventCode
      }, notificationUpdate);
      return {
        dismiss,
        update
      };
    } // create notification


    createNotification({
      id,
      startTime,
      eventCode
    }, notificationObject);
    return {
      dismiss,
      update
    };
  }

  function config(options) {
    validateConfig(options);
    configuration.update(store => ({ ...store,
      ...options
    }));
  }
}

var index = {
  init
};

export default index;
